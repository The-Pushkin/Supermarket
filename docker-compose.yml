version: '3.8'

services:
  pgadmin:
    depends_on: 
      - postgresql
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - TZ=Europe/Bucharest
      - PGADMIN_DEFAULT_EMAIL=admin@admin.admin
      - PGADMIN_DEFAULT_PASSWORD=student
    user: root
    ports: 
      - "8888:80"
    volumes: 
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - supermarket_network

  postgresql:
    image: postgres:latest
    env_file: .env
    ports: 
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes: 
      - postgres-db:/var/lib/postgresql/data
      - ./database/init/schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - supermarket_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U student -d supermarket"]
      interval: 5s
      timeout: 5s
      retries: 10
  
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    networks:
      - supermarket_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file: .env
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - postgresql
      - loki
    networks:
      - supermarket_network


  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - supermarket_network
    restart: always

  auth_service:
    image: thepushkin/auth_service
    container_name: auth_service
    ports:
      - "5005:5005"
    depends_on:
      - postgresql
    networks:
      - supermarket_network
  
  bussines_logic_service:
    image: thepushkin/business_logic_service
    container_name: bussines_logic_service
    ports:
      - "5000:5000"
    depends_on:
      - postgresql
    networks:
      - supermarket_network

  database_api_service:
    image: thepushkin/database_api_service
    container_name: database_api_service
    ports:
      - "5010:5010"
    depends_on:
      - postgresql
    networks:
      - supermarket_network
  
  kong-database:
    image: postgres:12
    container_name: kong-database
    networks:
      - supermarket_network
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-db:/var/lib/postgresql/data

  kong:
    image: kong:latest
    container_name: kong
    networks:
      - supermarket_network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ENABLED: true
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
      KONG_PORTAL: on
      KONG_ADMIN_GUI_URL: http://100.118.139.109:8002
      KONG_ADMIN_GUI_LISTEN: '0.0.0.0:8002'
    depends_on:
      - kong-database
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
    command: "kong docker-start"

  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap"
    networks:
      - supermarket_network
    restart: on-failure
    environment:
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    links:
      - kong-database
    depends_on:
      - kong-database
    profiles:
      - donotstart

volumes:
  postgres-db:
  pgadmin-data:
  grafana-data:
  portainer-data:
  kong-db:
  loki-data:

networks:
  supermarket_network: